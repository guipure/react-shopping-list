{"version":3,"sources":["components/CategoryForm.js","components/Product.js","components/ProductForm.js","components/Category.js","App.js","serviceWorker.js","store.js","index.js"],"names":["CategoryForm","observer","store","useState","title","setTitle","onSubmit","event","preventDefault","addCategory","TextField","label","fullWidth","onChange","target","value","Product","product","onRemove","price","bought","quantity","titleNode","Typography","variant","priceNode","quantityNode","ListItem","ListItemIcon","Checkbox","edge","checked","disableRipple","onClick","toggle","ListItemText","primary","className","Hidden","xsDown","secondary","ListItemSecondaryAction","IconButton","color","DeleteForever","ProductForm","category","setPrice","setQuantity","addProduct","Number","Grid","container","spacing","alignItems","item","xs","sm","md","isNaN","InputProps","endAdornment","InputAdornment","position","Button","size","disabled","startIcon","Add","type","Category","onCategoryRemove","products","onProductRemove","id","removeProduct","Card","CardHeader","subheader","action","endIcon","Close","CardContent","List","map","key","bind","App","removeCategory","totalPrice","CssBaseline","Container","align","categories","Boolean","window","location","hostname","match","Math","random","makeObservable","this","observable","ProductList","computed","reduce","sum","push","filter","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6f55bcf.chunk.js","sourcesContent":["import { TextField } from '@material-ui/core';\nimport { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\n\nconst CategoryForm = observer(({ store }) => {\n  const [title, setTitle] = useState('');\n\n  const onChange = (event) => setTitle(event.target.value);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (!title) return;\n\n    store.addCategory(title);  \n    setTitle('');\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <TextField\n        label=\"Введите категорию товара\"\n        fullWidth\n        onChange={onChange}\n        value={title}\n      />\n    </form>\n  );\n});\n\nexport default CategoryForm;","import { Checkbox, Hidden, IconButton, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, Typography } from '@material-ui/core';\nimport { DeleteForever } from '@material-ui/icons';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\n\nconst Product = observer(({ product, onRemove }) => {\n  const { title, price, bought, quantity } = product;\n\n  const titleNode = <Typography variant=\"h5\">{title}</Typography>;\n  const priceNode = <Typography>{price * quantity} ₽</Typography>;\n  const quantityNode = <Typography>{quantity} шт.</Typography>;\n\n  return (\n    <ListItem>\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          checked={bought}\n          disableRipple\n          onClick={() => product.toggle()}\n        />\n      </ListItemIcon>\n      <ListItemText primary={titleNode} className={bought ? 'bought' : ''} />\n      <div className=\"product-info\">\n        <Hidden xsDown>\n          <ListItemText secondary={quantityNode} />\n          <ListItemText secondary={priceNode} />\n        </Hidden>\n        <ListItemSecondaryAction>\n          <IconButton color=\"secondary\" onClick={onRemove}>\n            <DeleteForever />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </div>\n    </ListItem>\n  );\n});\n\nexport default Product;","import { Button, Grid, InputAdornment, TextField, Typography } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\n\nconst ProductForm = observer(({ category }) => {\n  const [title, setTitle] = useState('');\n  const [price, setPrice] = useState('');\n  const [quantity, setQuantity] = useState(1);\n\n  const onTitleChange = (event) => setTitle(event.target.value);\n  const onPriceChange = (event) => {\n    if (isNaN(Number(event.target.value))) return;\n    setPrice(event.target.value);\n  };\n\n  const onQuantityIncrement = () => setQuantity(quantity + 1);\n  const onQuantityDecrement = () => quantity < 2 ? setQuantity(1) : setQuantity(quantity - 1);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    \n    if (!title) return;\n\n    category.addProduct(title, Number(price), quantity);\n    setTitle('');\n    setPrice('');\n    setQuantity(1);\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} sm={6} md={3}>\n          <TextField\n            label=\"Название\"\n            onChange={onTitleChange}\n            value={title}\n            variant=\"outlined\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <TextField\n            label=\"Цена\"\n            onChange={onPriceChange}\n            value={price}\n            variant=\"outlined\"\n            fullWidth\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">₽</InputAdornment>,\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <div className=\"quantity-controls\">\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={onQuantityDecrement}\n              disabled={quantity < 2}\n            >-</Button>\n            <Typography>{quantity} шт.</Typography>\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={onQuantityIncrement}\n            >+</Button>\n          </div>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n            type=\"submit\"\n            fullWidth\n          >\n            Добавить товар\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n});\n\nexport default ProductForm;","import { Button, Card, CardContent, CardHeader, Hidden, List } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Product from './Product';\nimport ProductForm from './ProductForm';\n\nconst Category = observer(({ category, onCategoryRemove }) => {\n  const { title, products, price } = category;\n\n  const onProductRemove = (id) => category.removeProduct(id);\n\n  return (\n    <Card className=\"card\">\n      <CardHeader\n        title={title}\n        subheader={price ? `на сумму ${price} ₽` : 'нет товаров этой категории'}\n        action={\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            endIcon={<Close />}\n            onClick={onCategoryRemove}\n          >\n            <Hidden xsDown>Удалить категорию</Hidden>\n          </Button>\n        }\n      />        \n      <CardContent>\n        <ProductForm category={category} />\n        <List>\n          { products.map((product) => (\n            <Product\n              product={product}\n              key={product.id}\n              onRemove={onProductRemove.bind(null, product.id)}\n            />\n          )) }\n        </List>\n      </CardContent>\n    </Card>\n  );\n});\n\nexport default Category;","import { Container, CssBaseline, Typography } from '@material-ui/core';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport CategoryForm from './components/CategoryForm';\nimport Category from './components/Category';\n\nconst App = observer(({ store }) => {\n  const onCategoryRemove = (id) => store.removeCategory(id);\n\n  const price = (\n    <Typography>Стоимость всех товаров в списке — {store.totalPrice} ₽</Typography>\n  );\n\n  return (\n    <>\n      <CssBaseline />\n      <Container className=\"container\">\n        <Typography variant=\"h3\" align=\"center\">Список покупок</Typography>\n        <CategoryForm store={store} />\n        { store.categories.map((category) => (\n          <Category\n            key={category.id}\n            category={category}\n            onCategoryRemove={onCategoryRemove.bind(null, category.id)}\n          />\n        )) }\n        { store.totalPrice ? price : null }\n      </Container>\n    </>\n  );\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { makeObservable, observable, action, computed } from 'mobx';\n\nclass Product {\n  id = Math.random();\n  title = '';\n  price = 0;\n  quantity = 1;\n  bought = false;\n\n  constructor(title, price, quantity) {\n    makeObservable(this, {\n      title: observable,\n      bought: observable,\n      price: observable,\n      quantity: observable,\n      toggle: action,\n    });\n    this.title = title;\n    this.price = price;\n    this.quantity = quantity;\n  }\n\n  toggle() {\n    this.bought = !this.bought;\n  }\n}\n\nclass ProductList {\n  id = Math.random();\n  products = [];\n  title = '';\n\n  get price() {\n    return this.products.reduce((sum, product) => sum + product.price * product.quantity, 0);\n  }\n\n  constructor(title) {\n    makeObservable(this, {\n      products: observable,\n      title: observable,\n      price: computed,\n      addProduct: action,\n      removeProduct: action,\n    });\n    this.title = title;\n  }\n\n  addProduct(title, price, quantity) {\n    this.products.push(new Product(title, price, quantity));\n  }\n\n  removeProduct(id) {\n    this.products = this.products.filter(item => item.id !== id);\n  }\n}\n\nclass CategoryList {\n  categories = [];\n\n  get totalPrice() {\n    return this.categories.reduce((sum, category) => sum + category.price, 0);\n  }\n\n  constructor() {\n    makeObservable(this, {\n      categories: observable,\n      totalPrice: computed,\n      addCategory: action,\n      removeCategory: action,\n    })\n  }\n\n  addCategory(title) {\n    this.categories.push(new ProductList(title));\n  }\n\n  removeCategory(id) {\n    this.categories = this.categories.filter(item => item.id !== id);\n  }\n}\n\nconst store = new CategoryList();\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}